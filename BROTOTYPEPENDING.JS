// WEEK-1
// -------
// Code
// Remove horizontal scrollbar
// Add semantic tags
// Use color codes instead of red black etc


// Theory
// Semantic tags
// Div and span difference
// Iframe
// Formatting tags
// Css box model
// Position:sticky
// Css selector
// Css specificity

// WEEK-2
// ------
// Formatting tags
// selectors
// type of selectors
// Contextual classes
// grid structure
// utilities
// media object
// input group
// list group
// null and undefined
// push, pop

// WEEK-3
// ------Theory
// Js is dynamically typed
// == and ===
// Currying
// Call apply bind

// Code
// Map
// Foreach
// Array function

// WEEK-4
// ------
// EJS - looping, conditions
// 401, 403, 201
// fork()
// spawn()
// clustering module

// WEEK-5
// ------
// - BSON benefits
// - better understand how functions work
// - deleting a document using objectid
// - improve typing speed
// - fetching by condition, using projection and sorting by a field
// - using basic $regex string matching
// - case insensitive matching
// - TTL index
// - NoSQL injection
// - understand arguments of find()
// $project
// Array methods in mongodb
// comparison operators
// update practicals
// aggregate practicals
// Capped collection
// Views
// Atomicity
// Ne and nin
// Bulk write 
// Regex
// $ne

// WEEK-6
// ------

// keywords
// identifiers
// type casting
// hoisting
// closure
// callback
// primises
// filter/map/reduce
// generator functions
// optional chaining
// destructuring
// call, apply, bind 
// IIFE
// event bubbling and event capturing 
// HOF
// onject
// object methods
// array methods
// class
// prototypes
// promises.race
// promises.settle


// Node JS
// -------
// Streams
// fork()
// spawn()
// process.nextTick
// setimmediate , setTimeout, setTinterval
// single thread vs multi thread
// fs module
// os module
// handle async in node js
// handle errors in node js
// app.use vs app.set


// MongoDB
// --------
// perform backup and restore
// transactions
// aggregate
// lookup
// gridFs
// $expr



// js-->
// Datatypes
// Primitive Datatypes vs Non-Primitive
// Passed by value vs Passed by reference
// Function vs methods
// Arrow Function
// different methods to make an object
// String Coercion
// Boolean Coercion
// exec ()
// test () 

// Node js -->
// event loop
// macro task vs micro task
// synchronous vs asynchronous
// Libuv
// OS module
// readFile vs readFileSync
// res.send vs res.write
// express.json vs express.urlencoded
// package.json 
// Cookie vs Cache
// CSRF
// CORS headers

// MongoDB-->
// Primary Key vs Secondary key index
// Examples of Nosql Databases
// Replication
// GridFS
// Clustered Collection
// How to create a Capped Collection
// Aggregation

// JS
// template literals
// default parameter
// arrow function vs regular function
// weakmap
// anonymous function

// Node
// types of streams
// fork vs spawn
// res.setHeader
// express.static

// Mongodb
// $elemMatch
// Partition tolerence
// update practicals
// aggregate practicals

// Write current time to a file using file system
// http methods
// Create a http get end point to validate a number is odd or even
// promise (not a able to call function)
// constructor function
// fork() 
// spawn()
// currying
// $count
// group
// $min
// $max
// create collection
// Indexing
// $lookup
// create Index
// get index

// JS
// --------
// hoisting
// closure
// callback
// promises
// this keyword
// event delegation
// event propagation
// weak set vs weak map
// promises methods
// Object methods
// optional chaining
// map/filter/reduce
// generator functions
// let, const, var

// Node JS
// --------
// stream
// handle async operations
// handle errors in node js
// fs module
// os module

// MongoDB
// ------------
// replica sets
// compound indexing
// TTL indexing
// write concern
// $expr
// perform backup, restore

 
 	
// Personal Details
// Week 1-9
// Week 10-19
// Week 20-28
// English Assessment (Week 0-28)
// Pendings:
// Task
// Edit user not working

// JS
// memoization practicals
// splice practicals
// stop propagation

// Node, express
// piping
// npm init
// content negotiation
// app.locals
// res.send vs res.write

// Mongodb
// create index
// $addToSet vs $push
// Partition tolerance
// covered query



// JS-INTAKE 
// -----
// generator function
// finally
// nullish operator
// optional chaining
// const obj
// hoisting in normal function vs arrow function
// find the freq of elements in an array
// - ECMAScript 
// - understand scoping better
// - ES6 alternative for IIFE
// - understand pure function better
// - Symbol
// - JIT
// - how to run async task in browser
// - when is finally invoked
// - memoization 
// - class syntax, methods
// - .reduce(): count occurrences of a value 
// - remove all occurrences of a value from an array
// - remove nth element from array
// - cancel a setTimeout after 4 seconds
// - switch syntax
// Passed By Value vs Passed By reference
// Var , let , const
// Functional Scope
// Implicit Type coercion vs Explicit type coercion
// Object.create vs Constructor Pattern
// Callback Hell String Coercion
// Shallow Copy  
// IIFE 
// Benefits of IIFE
// Event.preventDefault
// - array empty
// - isArray, typeof [] -> object
// - largest number, reduce
// - object empty
// - [{},{}] -> [{}], filter
// - pure fn
// - Promise.race vs Promise.any
// - 2.2 -> 3

// INTAKE
// ------
// Finally block
// Throw statement
// Do while syntax
// Types of type casting
// Map collection
// Arrow functions
// ES6 standards
// Pure functions
// HOF example
// Call Apply Bind
// Callbacks
// Design patterns
// Timestamp
// Regular expression
// $inc decrement operation
// No of fruits in each vitamin query
// Find Fruits having red and orange colour query 
// Scaling in mongodb

 
 	
// Personal Details
// Week 1-9
// Week 10-19
// Week 20-28
// English Assessment (Week 0-28)
// Pendings:

// JS
// - event loop
// - webapi
// - closure
// - value of let in TDZ
// - dynamic typing 
// - class syntax
// - destructuring 
// - remove object property
// - generate array of first 5 prime numbers
// - .reduce(): sum of positive numbers
// - variadic function to return average of args
// - switch case
// - IIFE syntax
// Score: 3

// MongoDB
// - CAP theorem
// - GridFS: need clarity 
// - covered query
// - $addFields
// - priciest vitamin K fruit
// - $regex: letter "e" anywhere in name
// Score: 4.5

// Framework
// - process vs thread
// - child process, fork(), spawn()
// - CommonJS
// - fs operations
// - environment variables
// - ODM
// - query params, req.query
// - browser cache
// - CORS, HTTP OPTIONS 
// - cookie storage, types of browser storage
// - common HTTP status code


// WEEK -12 
// --------
// -how to create branch in git 
// -how to revert a commit 
// -git reset –hard
// -what is nginx? 
// -difference between reverse proxy and forward proxy 
// -default port of  https, mongodb
// -CORS 
// -subdomain 

// Learn basics of git and nginx 
// Logs
// Google login bug
// Wishlist to cart
// Exception handling 
// Validations
// Versioning
// CICD
// Elastic IP
// DNS
// SSH
// SSL
// Validations in e-commerce 

// WEEK-13
// -------
// memory leak
// dynamic array
// types of linked list
// applications of doubly LL
// Memory leak,Linked list problem (handle edge cases),logN
// Slice,String workout


// WEEK-14
// -------
// insert sort
// bubble sort
// merge sort
// separate chaining
// Hash Collision
// linear probing
// contracting probing
// hashing vs encryption
// SHA1, MD5, CRC32, other popular hashing algorithms
// hash table
// Time Complexity, 
// Space complexity for sotings, 
// Practices stacks and queues problems.

// WEEK-15
// -------
// Internal nodes
// Height of Tree
// Spanning tree
// Heapify


// WEEK-16
// -------
// SQL vs MySQL
// Primary key vs Unique key
// CHECK
// DEFAULT
// constraints in SQL
// Foreign keys
// CROSS JOIN
// SELF JOIN
// WHERE vs HAVING
// Entities
// Normalization & normal forms
// TRUNCATE vs DROP
// scalar function
// sub query
// UNION
// 1. unique key
// 2. candidate keys
// 3. ACID properties- refer more
// 4. purpose of normalisation
// 5. 1NF, 2NF, 3NF
// 6. stored procedure.
// 7. views
// 8. how to create a view
// 9. SQL injection, how to prevent SQL injection.
// 10. like and ilike

// - create a table and inset values into it.
// - fetch the details of students starting with a particular letter.
// -difference between consistency and atomicity 
// -how indexing works
// -sql order of execution
// -capitalize the first character of name 
// -write a query to get the name of team with highest trophy
// -create a table with foreign field
// BigSerial
// Sequences
// Union vs join 
// Trigger
// Sub queries 

// WEEEK-17
// --------
// -overriding 
// -overloading 
// -purpose/benifits of interface 
// -difference between type and interface
// -tsconfig 
// - decorators 
// - mixins
// - type assertion
// - transpiler
// - access modifiers
// - unknown vs any
// - interface inheritance
// - class that conforms to one or more interfaces 
// - variadic function that returns sum and average (describe return using an interface)
// - proper usage of generics
// - Enum syntax
// - Promise
// type casting vs type assertion, 
// decorators, 
// data abstraction vs data encapsulation - understand better, 
// how to implement data abstraction and encapsulation,  
// polymorphism, 
// class vs interface - learn more, 
// abstract class, 
// static, 
// static vs const, 
// application of generics, 
// declare, 
// declaration merging, 
// Very weak in OOP.
// Understand OOP concepts clearly and practice it.
// Class and Object 
// static and const
// Enum
// Concepts of Oops
// Basic fundamental coding of TypeScript 
// How to give type for return for a function 
// How to pass argument in a function in js / Ts
// print the properties of child class using the parent class methods super and super()


// WEEK-18
// --------
// - CSR vs SSR
// - div vs fragment
// - babel
// - React.createElement 
// - StrictMode 
// - error boundary 
// - synthetic events *
// - handling lifecycle events using useEffect
// - forwardRef *
// - immutability of state
// - passing data from child to parent
// - purpose of using spread operator when updating todos array
// - understand how ESModules import system works
// - application of useRef
// - edit todo
// - split into components
// - workout: update title in page when button is pressed after entering text into input field
// Life cycle methods in class components
// useEffect- refer more

// WEEK-19
// -------
// arguments of usecallback
// dependencies in usecallback
// useMemo
// Eg for Higher Order Component
// dependancy in React.memo

// WEEK-20
// -------
// - context API vs redux 
// - setting up redux in React app
// - immutability of state 
// - principles of redux 
// - where is session stored
// - session vs JWT
// - structure of JWT
// - HTTP 200 vs 201, 403
// - refresh token
// - HTTP-Only cookie
// - samesite cookie

// - signup input validation 
// - understand the difference between signup and signin
// - use correct HTTP status codes and methods
// - modify user info without changing password in admin
// - refer OpenAPI examples and learn how to design endpoints 
// - add search endpoint (currently search is client side filter)
// why react is different from others
// virtual dom - need clarity
// forwardRef
// context vs redux
// subscribe(listener)
// combineReducers
// asynchronous actions in Redux
// applyMiddleware function
// the use of connect
// mapdispatchtoprops
// create a timer - setInterval
// store the data in redux
// show it in screen
// middleware, 
// Redux thunk, 
// redux saga, 
// createAsyncThunk, 
// Error Handling.


// WEEK-21
// -------
// JS
// - parent class of Array
// - Map  vs Object
// - Object.entries()
// - eval()
// - properties of Error()
// - running async functions without await
// - boxing *
// - JIT
// - labels 
// - benefits of IIFE
// - static
// - destructuring (destructure array of 10 elements in 3 variables)
// - remove keys correspond to non-strings in object
// - object manipulation
// - countdown timer that ticks to 0 and stops 
// - tomorrow’s date in DD/MM/YYYY format
// T 3
// P 2

// DB
// - covered query
// - redundancy 
// - scaling 
// - explain()
// - reduce the salary of developers by 20%
// - unique skills without using distinct 
// - developers who joined after 2023
// T 3.5
// P 2

// Frontend
// - synthetic events
// - ESModules 
// - dynamic imports 
// - types of routers
// - useParams
// - debouncing 
// - purpose of key prop, why shouldn’t key be array index
// - reducer
// Score: 3.5

// Backend
// - concurrency 
// - process vs thread
// - socket *
// - reading ENV
// - CommonJS 
// - dir listing using fs
// - router chaining 
// - structure of JWT
// - purpose of JWT signature
// - CSRF
// - browser cache vs cookies
// - HTTP 401
// - reverse proxy
// - DNS
// - HTTPS port
// - load balancing 
// Score: 3

// DSA
// - byte
// - circular references 
// - traditional array vs js arrays
// - UTF-8 vs ASCII
// - escape sequences
// - AVL trees
// - weighted graphs 
// - shuffle an array
// - selection sort
// - snake_case to PascalCase
// -closures 
// -benefits/purpose of closures 
// -scope Channing 
// -replace all the values with your name 
// -difference between spawn and fork 
// -difference between fs.readFile and fs createReadStream 
// -EvenEmmiter 
// -status code 201

// -replace all the values of given object with your name 
// -find the second largest word in a sentence 
// -time complexity of quick sort 
// -reverse your name using recursion 

// -disadvantage of indexing 
// -which data structure is used in mongodb indexing 
// -$cond 
// -$out
// -write query to get in department maximum employees are working 


// -Difference between controlled and uncontrolled component 
// -custom hooks 
// -HOC
// -pass data from child to parent component 
// currying (need more practice)
// proxy object
// Prototype(need clarity)
// call
// apply
// bind
// coercion
// event propagation
// event delegation
// flatmap
// promise
// generator function
// polyfills
// write content into a file
// preflight request(need clarity)
// Authentication vs Authorization
// libuv
// event emitter
// reactor pattern
// phases of an event loop
// create a http server using express
// iscapped
// create a capped collection
// aggregation pipeline(practice theory)
// $addtoset
// logical operation
// covered query
// create index
// $lookup
// binary search and replace target with 0
// merge sort
// synthetic events
// shadow dom
// parent to child communication
// child to parent communication
// react fiber
// useRef(need clarity)
// Siblings communication in react
// JS
// -----
// pass by value & pass by reference
// explore applications of closure
// starvation
// this context

// DS
// ---
// sum of elements in an array using recursion
// AVL tree
// monotonic stack & monotonic queue
// reverse a string using queue

// react
// ---------
// benefits of uncontrolled elements
// react.memo
// limitations of functional components
// form submission workout involving child to parent data transfer

// node-express
// -------------
// router chaining
// dynamic routing
// query params vs path params
// package-lock.json
// application level vs router level middleware
// same origin policy

// mongoDb
// --------
// clustered collection
// how to modify a collection name
// $expr
// $facet
// Event bubbling vs event capturing
// What is js polyfils?
// What are iterators and generators in JavaScript and what are they used for?
// Explain the difference between mutable and immutable objects in JavaScript
// difference between a Map object and a plain object in JavaScript?
// Map vs. WeakMap
// Set vs. WeakSet
//  object property flags and descriptors?
// ==============
// Node & express:
// difference between Nodejs, AJAX, and jQuery? 
// If Node.js is single threaded then how it handles concurrency?
// monitor a file for modifications in Node.js
// Global objects
// What is v8?
// difference between returning a callback and just calling a callback ?
// What is eventEmitter?

// Mongodb:
// Sharding- partial correct but there is room for improvement
// How to optimise the query performance?
// Write a mongodb query to find the 2nd heightest salary of employee in each manager?

// React js:
// Take a deeper understanding of the use of React.memo.
// How to stop render the child component if parent is rendering.
// Benefits of using useRef (can we store data inside) ?
// Controlled vs uncontrolled component?
// Take a deep understanding of using HOC?
// Explain 5 optimisation technic in react js to improve application performance 

// Dsa;

// How to calculate time and space complexity?
// Time complexity of quick sort
// Explain memory management?
// What is memory-leak with example?
// Difference between array and linklist?
// Write the code to find the given list is circular linklist?
// Disadvantage of recursion?
// Remove the duplicates from array using recursion?
// Reverse the binary tree
// Find the height of binary tree
// Write the code to check the graph is connected or not?
// Write the code to reverse the string at same place using stack or recursion?
// Find the character occurrence in the given string using hashtable or normal way by maintaining time complexity constraints