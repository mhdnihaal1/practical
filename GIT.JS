

//           git 
// ====================
// -init:making a backup folder structure
//      ignore:its a configuration
// -commit:it the thing that we uploads commit 
// -log:we can see the commits
//    snapshot:complete project information
// -add:only add the changed one 
// -checkout:show the before step commits of folders or files
//     head :
// -reset:putting the head on previous head 
// -branch: git branch
// -merge:putting the one file all things to another file is calledd merging
//     conflict:
// -cherry-pick:we can merge the one commit and merge it
// -diff:difference of two file  or commits etc...
// -clone:cloning means give the project to everyOne 
// -push:pushing the data into main 
// -pull:taking the data from the main
//     pull request:asking request to  push the data






// -how to create branch in git 
// -how to revert a commit 
// -git reset â€“hard
// -what is nginx  
// -difference between reverse proxy and forward proxy 
// -default port of  https, mongodb
// -CORS 
// -subdomain 


// Learn basics of git and nginx 
// Complete the basic tutorial of GIT.

// Finish nginx tutorial and host your first project on AWS, Azure, GCP cloud platform instance (Load balancing, caching, Reverse proxy).
// Learn about Alternatives of nginx.
// HTTP protocols.
// Learn the difference between HTTP and HTTPs.




//              watch code malayalam



// Git commit  = It the thing that we uploads commit 
// Git branch  =
// Cloning  
// Git add   = for adding files
// Git checkout=show the before step commits of folders or files
// Git revert =using revert we can remove commits 
// Git init  = its like creating a back up file
// Git status  = for checking the git status 
// Git merge  =it is using for merging the branches
// Git pull   = Retrieves changes from the remote repository to your local repository
// Git config   =
// Git push   = Sends changes from your local repository to the remote repository
// Git log    = to see the commits
// Git remote  = list all remote reposetories(remote = the reposetory saved in online or internet or somewhere)
// Git stash    =is a command used to temporarily store changes that are not ready to be committed yet. Stashing allows you to save your work without committing it to the current branch. 
// Git reset --hard   =to to remove after commits
// Git reset = show the selected data on top
// Git diff   = difference between two commits
// Git tag    =  Tags are used to mark important points in the history of a project, such as release points or significant commits.
// Git fetch  =s a Git command that retrieves changes from a remote repository, but it does not integrate them into your current working branch. Instead, it brings in new commits
// Git rebase =  is a Git command that allows you to move or combine a sequence of commits to a new base commit
// Git replace= It is a powerfull tool using this we can remove the replace the blobs
// Git clean  = is a powerful Git command used to remove untracked files and directories from the working directory.
// Git help  =
// Rename a local branch
// Git bisect = is a powerful Git tool used to identify the specific commit that introduced a bug or issue in your codebas

 



 















